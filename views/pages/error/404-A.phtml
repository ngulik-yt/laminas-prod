<?php  $kjlofjuk=$this;use Zend\Mvc\Application;use Zend\Debug\Debug;$kjlofjuk->headLink()->appendStylesheet('https://fonts.googleapis.com/css?family=Inconsolata');$kjlofjuk->headStyle()->captureStart(); ?> html { min-height: 100%; } body { box-sizing: border-box; height: 100%; background-color: #000000; background-image: radial-gradient(#11581E, #041607); font-family: 'Inconsolata', Helvetica, sans-serif; font-size: 1.2rem; color: rgba(128, 255, 128, 0.8); text-shadow: 0 0 1ex rgba(51, 255, 51, 1), 0 0 2px rgba(255, 255, 255, 0.8); } .overlay { pointer-events: none; position: absolute; width: 99%; height: 98%; background: repeating-linear-gradient( 180deg, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0.3) 50%, rgba(0, 0, 0, 0) 100%); background-size: auto 4px; z-index: 99; } .overlay::before { content: ""; pointer-events: none; position: absolute; display: block; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; background-image: linear-gradient( 0deg, transparent 0%, rgba(32, 128, 32, 0.2) 2%, rgba(32, 128, 32, 0.8) 3%, rgba(32, 128, 32, 0.2) 3%, transparent 100%); background-repeat: no-repeat; animation: scan 7.5s linear 0s infinite; } @keyframes scan { 0% { background-position: 0 -100vh; } 35%, 100% { background-position: 0 100vh; } } .terminal { box-sizing: inherit; position: absolute; width: 99%; max-width: 100%; padding: 2.5rem; } .output { color: rgba(128, 255, 128, 0.8); text-shadow: 0 0 1px rgba(51, 255, 51, 0.4), 0 0 2px rgba(255, 255, 255, 0.8); } .output.stacktrace,ul.trace li{ font-size: 1rem; } .output::before { content: "> "; } a { color: #fff; text-decoration: none; } a::before { content: "["; } a::after { content: "]"; } .errorcode { color: white; } <?php $kjlofjuk->headStyle()->captureEnd();$kjlofjul=null; ?> <div class="overlay"></div><div class="terminal"><h1>Error <span class="errorcode">404</span></h1> <?php if(_DEBUG_ ||($kjlofjul!=null &&isset($kjlofjul['roles'][1]))): ?> <h2><span class="errorcode"><?=$kjlofjuk->message  ?></span></h2> <?php endif  ?> <p class="output">The page you are looking for might have been removed, had its name changed or is temporarily unavailable</p> <?php  if(_DEBUG_ ||($kjlofjul!=null &&isset($kjlofjul['roles'][1]))){ ?> <h2><span class="errorcode">REASON.</span></h2> <?php  if(!empty($kjlofjuk->reason)){switch($kjlofjuk->reason){case  Application::ERROR_CONTROLLER_CANNOT_DISPATCH:$kjlofjum='The requested controller was unable to dispatch the request.';break;case  Application::ERROR_MIDDLEWARE_CANNOT_DISPATCH:$kjlofjum='The requested middleware was unable to dispatch the request.';break;case  Application::ERROR_CONTROLLER_NOT_FOUND:$kjlofjum='The requested controller could not be mapped to an existing controller class.';break;case  Application::ERROR_CONTROLLER_INVALID:$kjlofjum='The requested controller was not dispatchable.';break;case  Application::ERROR_ROUTER_NO_MATCH:$kjlofjum='The requested URL could not be matched by routing.';break;default:$kjlofjum='We cannot determine at this time why a 404 was generated.';break;} ?> <p class="output"><?=$kjlofjum  ?></p> <?php } ?> <?php if(!empty($kjlofjuk->controller)): ?> <h2><span class="errorcode">CONTROLLER.</span></h2><p class="output"> <?=$kjlofjuk->escapeHtml($kjlofjuk->controller) ?> <?php  if(!empty($kjlofjuk->controller_class)&&$kjlofjuk->controller_class !=$kjlofjuk->controller){printf('(resolves to %s)',$kjlofjuk->escapeHtml($kjlofjuk->controller_class));} ?> </p> <?php endif  ?> <?php if(!empty($kjlofjuk->display_exceptions)): ?> <?php if(isset($kjlofjuk->exception)&&($kjlofjuk->exception instanceof \Exception ||$kjlofjuk->exception instanceof \Error)): ?> <h2><span class="errorcode">Additional information : </span><?=get_class($kjlofjuk->exception) ?></h2><p class="output">File : <?=$kjlofjuk->exception->getFile() ?>:<?=$kjlofjuk->exception->getLine() ?> </p><p class="output">Message : <?=$kjlofjuk->escapeHtml($kjlofjuk->exception->getMessage()) ?> </p><p class="output stacktrace">Stack trace :<br> <?php  ?> </p><ul class="trace"> <?php  $kjlofjun=$kjlofjuk->exception->getTrace();foreach($kjlofjun as $kjlofjuo=>$kjlofjup){echo '<li>['.($kjlofjuo+1).']<br>';if(isset($kjlofjup['file'])){echo $kjlofjup['file'].' (line '.$kjlofjup['line'].')<br>';}$kjlofjuq=[];foreach($kjlofjup['args']as $kjlofjur){if($kjlofjur===null){$kjlofjuq[]="NULL";}elseif(is_object($kjlofjur)){$kjlofjuq[]=get_class($kjlofjur);}else{$kjlofjuq[]=gettype($kjlofjur);}}if(isset($kjlofjup['class'])){echo $kjlofjup['class'].$kjlofjup['type'].$kjlofjup['function'].'('.implode(", ",$kjlofjuq).')</li>';}} ?> </ul> <?php if($kjlofjus=$kjlofjuk->exception->getPrevious()): ?> <h2><span class="errorcode">Previous exceptions.</span></h2> <?php $kjlofjut=0 ?> <?php while($kjlofjus): ?> <h2><span class="errorcode"><?=get_class($kjlofjus) ?></span></h2><p class="output">File : <?=$kjlofjus->getFile() ?>:<?=$kjlofjus->getLine() ?> </p><p class="output">Message : <?=$kjlofjuk->escapeHtml($kjlofjus->getMessage()) ?> </p><p class="output stacktrace">Stack trace : <?=$kjlofjuk->escapeHtml($kjlofjus->getTraceAsString()) ?> </p> <?php  $kjlofjus=$kjlofjus->getPrevious();if(++$kjlofjut >=50){echo '<h2><span class="errorcode">There may be more exceptions, but we do not have enough memory to process it.</span></h2>';break;} ?> <?php endwhile  ?> <?php endif  ?> <?php else: ?> <h2><span class="errorcode">No Exception available.</span></h2> <?php endif  ?> <?php endif  ?> <?php } ?> <p class="output"><a href="<?=$kjlofjuk->identity()['default_redirect']??$kjlofjuk->url('landing'); ?>">HOME</a></p></div>