<?php $kjln3jmv=$this;use Zend\Debug\Debug;$kjln3jmv->headLink()->appendStylesheet('https://fonts.googleapis.com/css?family=Inconsolata');$kjln3jmv->headStyle()->captureStart(); ?> html { min-height: 100%; } body { box-sizing: border-box; height: 100%; background-color: #000000; background-image: radial-gradient(#11581E, #041607); font-family: 'Inconsolata', Helvetica, sans-serif; font-size: 1.2rem; color: rgba(128, 255, 128, 0.8); text-shadow: 0 0 1ex rgba(51, 255, 51, 1), 0 0 2px rgba(255, 255, 255, 0.8); } .overlay { pointer-events: none; position: absolute; width: 99%; height: 98%; background: repeating-linear-gradient( 180deg, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0.3) 50%, rgba(0, 0, 0, 0) 100%); background-size: auto 4px; z-index: 99; } .overlay::before { content: ""; pointer-events: none; position: absolute; display: block; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; background-image: linear-gradient( 0deg, transparent 0%, rgba(32, 128, 32, 0.2) 2%, rgba(32, 128, 32, 0.8) 3%, rgba(32, 128, 32, 0.2) 3%, transparent 100%); background-repeat: no-repeat; animation: scan 7.5s linear 0s infinite; } @keyframes scan { 0% { background-position: 0 -100vh; } 35%, 100% { background-position: 0 100vh; } } .terminal { box-sizing: inherit; position: absolute; width: 99%; max-width: 100%; padding: 2.5rem; } .output { color: rgba(128, 255, 128, 0.8); text-shadow: 0 0 1px rgba(51, 255, 51, 0.4), 0 0 2px rgba(255, 255, 255, 0.8); } .output.stacktrace,ul.trace li{ font-size: 1rem; } .output::before { content: "> "; } a { color: #fff; text-decoration: none; } a::before { content: "["; } a::after { content: "]"; } .errorcode { color: white; } <?php $kjln3jmv->headStyle()->captureEnd();$kjln3jmw=$kjln3jmv->identity(); ?> <div class="overlay"></div><div class="terminal"><h1><span class="errorcode">An error occurred</span></h1> <?php if(_DEBUG_ ||($kjln3jmw !=null &&isset($kjln3jmw['roles'][1]))){ ?> <?php if(!empty($kjln3jmv->display_exceptions)): ?> <?php if(isset($kjln3jmv->exception)&&($kjln3jmv->exception instanceof \Exception ||$kjln3jmv->exception instanceof \Error)): ?> <h2><span class="errorcode">Additional information : </span><?=get_class($kjln3jmv->exception) ?></h2><p class="output">File : <?=$kjln3jmv->exception->getFile() ?>:<?=$kjln3jmv->exception->getLine() ?> </p><p class="output">Message : <?=$kjln3jmv->escapeHtml($kjln3jmv->exception->getMessage()) ?> </p><p class="output stacktrace">Stack trace :<br> <?php  ?> </p><ul class="trace"> <?php $kjln3jmx=$kjln3jmv->exception->getTrace();foreach($kjln3jmx as $kjln3jmy =>$kjln3jmz){echo '<li>['.($kjln3jmy+1).']<br>';if(isset($kjln3jmz['file'])){echo $kjln3jmz['file'].' (line '.$kjln3jmz['line'].')<br>';}$kjln3jn0=[];foreach($kjln3jmz['args']as $kjln3jn1){if($kjln3jn1 ===null){$kjln3jn0[]="NULL";}elseif(is_object($kjln3jn1)){$kjln3jn0[]=get_class($kjln3jn1);}else{$kjln3jn0[]=gettype($kjln3jn1);}}if(isset($kjln3jmz['class'])){echo $kjln3jmz['class'].$kjln3jmz['type'].$kjln3jmz['function'].'('.implode(", ",$kjln3jn0).')</li>';}} ?> </ul> <?php if($kjln3jn2=$kjln3jmv->exception->getPrevious()): ?> <h2><span class="errorcode">Previous exceptions.</span></h2> <?php $kjln3jn3=0 ?> <?php while($kjln3jn2): ?> <h2><span class="errorcode"><?=get_class($kjln3jn2) ?></span></h2><p class="output">File : <?=$kjln3jn2->getFile() ?>:<?=$kjln3jn2->getLine() ?> </p><p class="output">Message : <?=$kjln3jmv->escapeHtml($kjln3jn2->getMessage()) ?> </p><p class="output stacktrace">Stack trace : <?=$kjln3jmv->escapeHtml($kjln3jn2->getTraceAsString()) ?> </p> <?php $kjln3jn2=$kjln3jn2->getPrevious();if(++$kjln3jn3 >=50){echo '<h2><span class="errorcode">There may be more exceptions, but we do not have enough memory to process it.</span></h2>';break;} ?> <?php endwhile ?> <?php endif ?> <?php else: ?> <h2><span class="errorcode">No Exception available.</span></h2> <?php endif ?> <?php endif ?> <?php } ?> <p class="output"><a href="<?=$kjln3jmv->identity()['default_redirect']??$kjln3jmv->url('landing'); ?>">HOME</a></p></div>